#+title: AoC 2022 - Day 3
#+author: Kirols Bakheat
#+PROPERTY: header-args:sh :cache no

* Part 1
** Problem
1. Take a list of strings. Each string is a list of *case sensitive* letters.
2. Each list represents an item.
3. Split each list in half, left and right.
4. Find the item shared by both sides and map it to it's value.
5. Sum the values of all items.

** Solution
#+BEGIN_SRC haskell :tangle Part1.hs
import Data.Char (isAsciiLower, ord)
import Data.List (intersect, nub)

main :: IO ()
main = do
  txt <- readFile "data.txt"
  print $ sum $ map (head . map charval . nub . uncurry intersect . splitHalf) $ lines txt

splitHalf :: [a] -> ([a], [a])
splitHalf xs = splitAt (length xs `div` 2) xs

charval :: Char -> Int
charval c = 1 + if isAsciiLower c then ord c - ord 'a' else ord c - ord 'A' + 26
#+END_SRC

** Results
#+begin_src sh
runghc Part1.hs
#+end_src

#+RESULTS[32159a199056f188403101584d964cded9296812]:
: 7908

* Part 2
** Problem
1. Take a list of pairs of characters. List is separated by newlines, pairs are separated by spaces.
2. Each pair represents what your opponent plays then whether you need to lose, tie, or win.
3. Find out what you're supposed to play.
4. Score according to these tables
   | Your Play | Score |
   | X         |     1 |
   | Y         |     2 |
   | Z         |     3 |

   | Outcome | Score |
   | Lose    |     0 |
   | Tie     |     3 |
   | Win     |     6 |
** Solution
#+name: part2
#+BEGIN_SRC haskell :tangle Part2.hs
import Data.Char (isAsciiLower, ord)
import Data.List (intersect, nub)
import Data.List.Split (chunksOf)

main :: IO ()
main = do
  txt <- readFile "data.txt"
  print $ sum $ map (charval . head . nub . (\[x, y, z] -> x `intersect` y `intersect` z)) $ chunksOf 3 $ lines txt

charval :: Char -> Int
charval c = 1 + if isAsciiLower c then ord c - ord 'a' else ord c - ord 'A' + 26
#+END_SRC

** Results
#+BEGIN_SRC sh
runghc Part2.hs
#+END_SRC

#+RESULTS[a8401b6fa106d729cfb9f901c651aae2ec295828]:
: 2838
